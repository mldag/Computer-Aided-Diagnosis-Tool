# -*- coding: utf-8 -*-
"""ClassActivation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qGr6GnAXd7UPYhF9pp7UzP-3kIGa1Bp3
"""

import os
import numpy as np
import tensorflow as tf
import pathlib
import matplotlib.pyplot as plt
import cv2
import keras.preprocessing.image 
from google.colab import drive
drive.mount('/content/drive')
import scipy as sc

m = tf.keras.models.load_model("drive/MyDrive/Chnet.h5")

single_image = cv2.imread("drive/MyDrive/COVID-1.png")

single_image = cv2.resize(single_image, (224, 224))
single_image = cv2.cvtColor(single_image, cv2.COLOR_BGR2RGB)
plt.imshow(single_image)
plt.show()

single_image.shape

img = single_image/255
img = np.asarray(img)
img = img.reshape(1, 224, 224, 3)
img.shape

y_pred = m.predict(img)[0]
y_pred = np.argmax(y_pred)
y_pred

classes = list({'COVID': 0, 'Viral Pneumonia': 1, 'Normal': 2, 'Lung_Opacity': 3})
classes[y_pred]

# Retrieve the weights from the last layer, without paying attention to the bias values
weights = m.layers[-1].get_weights()[0]
weights

weights = weights.reshape(weights.shape[1], weights.shape[0])
weights.shape

weights_for_predicted_class_for_this_image = weights[y_pred]
weights_for_predicted_class_for_this_image

new_model = tf.keras.models.Model(
    m.input, 
    m.get_layer('conv5_block16_concat').output
)
output_con_layer = new_model.predict(img)[0]
output_con_layer.shape

import scipy as sc
resize_image = sc.ndimage.zoom(output_con_layer, (int(224/output_con_layer.shape[0]), 
                                                  int(224/output_con_layer.shape[1]), 1))

weights_for_predicted_class_for_this_image.shape

final_image = np.dot(
    resize_image.reshape(resize_image.shape[0]*resize_image.shape[1], resize_image.shape[2]),
    weights_for_predicted_class_for_this_image
).reshape(resize_image.shape[0], resize_image.shape[1])

final_image.shape

img.shape

img_ = img.reshape(224, 224, 3)
img_.shape

from matplotlib.patches import Rectangle

np.unique(final_image)

final_image.shape

final_image = final_image/255
plt.figure(figsize = (4, 4))
plt.imshow(single_image)
plt.imshow(final_image, cmap='jet', alpha=0.3)

def getHeatMap(image):
  single_image = cv2.imread(image)
  single_image = cv2.resize(single_image, (224, 224))
  single_image = cv2.cvtColor(single_image, cv2.COLOR_BGR2RGB)
  img = single_image/255
  img = np.asarray(img)
  img = img.reshape(1, 224, 224, 3)
  y_pred = m.predict(img)[0]
  y_pred = np.argmax(y_pred)
  classes = list({'COVID': 0, 'Viral Pneumonia': 1})
  class_prediction = classes[y_pred]
  weights = m.layers[-1].get_weights()[0]
  weights = np.asarray(weights)
  weights = weights.reshape(weights.shape[1], weights.shape[0])
  weights_for_predicted_class_for_this_image = weights[y_pred]
  new_model = tf.keras.models.Model(
    m.input, 
    m.get_layer('conv5_block16_concat').output
    )
  output_con_layer = new_model.predict(img)[0]
  resize_image = sc.ndimage.zoom(output_con_layer, (int(224/output_con_layer.shape[0]), 
                                                  int(224/output_con_layer.shape[1]), 1))
  final_image = np.dot(
      resize_image.reshape(resize_image.shape[0]*resize_image.shape[1], resize_image.shape[2]),
      weights_for_predicted_class_for_this_image
  ).reshape(resize_image.shape[0], resize_image.shape[1])
  img_ = img.reshape(224, 224, 3)
  final_image = final_image/255
  plt.figure(figsize = (4, 4))
  plt.imshow(single_image)
  plt.imshow(final_image, cmap='jet', alpha=0.3)
  return class_prediction

datasetObject = pathlib.Path(os.path.join(dataset_folder))
images = list(datasetObject.glob("*/*/*.*"))
arr = []
for i in images[:8]:
  arr.append(getHeatMap(os.path.join(i)))

plt.figure(figsize = (20, 10))
for j, i in enumerate(arr[:8]):
  plt.subplot(2, 4, j + 1)
  plt.imshow(i[0])
  plt.title(i[2])
plt.show()

plt.figure(figsize = (20, 10))
for j, i in enumerate(arr[:8]):
  plt.subplot(2, 4, j + 1)
  plt.imshow(i[0])
  plt.imshow(i[1], cmap='jet', alpha=0.3)
  plt.title(i[2])
plt.show()



